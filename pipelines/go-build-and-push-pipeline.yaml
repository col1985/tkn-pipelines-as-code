apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: go-build-and-push
  annotations:
    # Use golangci-lint from the hub to test our Golang project
    pipelinesascode.tekton.dev/task: "golangci-lint"
spec:
  workspaces:
    - name: shared-workspace
    - name: dockerconfig-ws
      optional: true
  params:
    - name: build_name
      type: string
      description: name of the deployment to be patched
    - name: package
      type: string
      description: name of the deployment to be patched
    - name: repo_url
      type: string
      description: url of the git repo for the code of deployment
    - name: context_dir
      type: string
      description: url of the git repo for the code of deployment
    - name: revision
      type: string
      description: revision to be used from repo of the code for deployment
      default: main
    - name: dockerfile
      type: string
      description: image to be build from the code
    - name: IMAGE_REPO
      type: string
      description: image to be build from the code
  tasks:
    - name: fetch-repository
      taskRef:
        resolver: cluster
        params:
          - name: kind
            value: task
          - name: name
            value: git-clone
          - name: namespace
            value: openshift-pipelines
      workspaces:
        - name: output
          workspace: shared-workspace
      params:
        - name: URL
          value: $(params.repo_url)
        - name: SUBDIRECTORY
          value: ""
        - name: DELETE_EXISTING
          value: "true"
        - name: REVISION
          value: $(params.revision)
    - name: golangci-lint
      taskRef:
        name: golangci-lint
        params:
          - name: package
            value: .
          - name: flags
            value: --verbose
          - name: context
            value: $(params.context_dir)
        runAfter:
          - fetch-repository
    - name: build-image
      taskRef:
        resolver: cluster
        params:
          - name: kind
            value: task
          - name: name
            value: buildah
          - name: namespace
            value: openshift-pipelines
      params:
        - name: IMAGE
          value: $(params.IMAGE_REPO)
        - name: CONTEXT
          value: $(params.context_dir)
        - name: DOCKERFILE
          value: $(params.dockerfile)
      workspaces:
        - name: source
          workspace: shared-workspace
        - name: dockerconfig
          workspace: dockerconfig-ws
      runAfter:
        - go-linter
